apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: ResourceHashPlugin

def env
if (hasProperty('env')) {
    env = property('env')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    jcenter()
}

dependencies {
    providedCompile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.glassfish.jersey.test-framework:jersey-test-framework-core:2.19'
    testRuntime 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:2.19'
}

test {
    systemProperty 'java.util.logging.config.file', 'logging.properties'

    def testFactoryClass
    switch(env) {
        case 'grizzly' : testFactoryClass = 'org.glassfish.jersey.test.grizzly.GrizzlyTestContainerFactory'      ; break
        case 'inmemory': testFactoryClass = 'org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory'    ; break
        case 'jdk'     : testFactoryClass = 'org.glassfish.jersey.test.jdkhttp.JdkHttpServerTestContainerFactory'; break
        case 'jetty'   : testFactoryClass = 'org.glassfish.jersey.test.jetty.JettyTestContainerFactory'          ; break
        case 'simple'  : testFactoryClass = 'org.glassfish.jersey.test.simple.SimpleTestContainerFactory'        ; break
    }
    if (testFactoryClass) {
        systemProperty 'jersey.config.test.container.factory', testFactoryClass
    }
}

class ResourceHashPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('hash') << {
            def md = java.security.MessageDigest.getInstance('MD5')
            project.processResources.destinationDir.traverse {
                if (it.file) {
                    def file = new File(it.parent, it.name + '.md5')
                    def digest = md.digest(it.bytes).collect { String.format('%02x', it) }.join()
                    file.write(digest)
                }
            }
        }
        project.war.dependsOn project.hash
        project.hash.dependsOn project.processResources
    }
}
